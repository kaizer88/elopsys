# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.db.models.deletion
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('employees', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('comments', models.CharField(default=None, max_length=2000, null=True, blank=True)),
                ('commented', models.DateTimeField(auto_now_add=True)),
                ('comment_type', models.CharField(default=None, max_length=120)),
                ('obj_id', models.IntegerField(null=True, blank=True)),
                ('created_by', models.ForeignKey(related_name='user_comments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FileUpload',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('file_name', models.CharField(max_length=255, blank=True)),
                ('file', models.FileField(upload_to='uploads/fleet')),
                ('transaction_id', models.CharField(default=None, max_length=20, null=True, blank=True)),
                ('transaction', models.CharField(default=None, max_length=50, null=True, blank=True)),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='FuelAllocation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('allocation_date', models.DateField(null=True, blank=True)),
                ('transaction_type', models.CharField(default=None, max_length=20, choices=[('Monthly Allocation', 'Monthly Allocation'), ('Top up', 'Top up')])),
                ('balance', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('amount_allocated', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('new_balance', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('accept', models.BooleanField(default=False)),
                ('authorize', models.CharField(default='Pending', max_length=20, null=True, blank=True, choices=[('Pending', 'Pending'), ('Aproved', 'Authorize'), ('Declined', 'Decline')])),
                ('created_by', models.ForeignKey(related_name='user_fuelAllocations', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='driver_fuelAllocations', to='employees.Employee')),
            ],
        ),
        migrations.CreateModel(
            name='FuelCard',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('card_number', models.CharField(unique=True, max_length=120)),
                ('card_type', models.CharField(max_length=20, choices=[('Absa Fleet', 'Absa Fleet'), ('Eden Red', 'Eden Red')])),
                ('created_by', models.ForeignKey(related_name='user_fuelcards', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalFuelAllocation',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('allocation_date', models.DateField(null=True, blank=True)),
                ('transaction_type', models.CharField(default=None, max_length=20, choices=[('Monthly Allocation', 'Monthly Allocation'), ('Top up', 'Top up')])),
                ('balance', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('amount_allocated', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('new_balance', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('accept', models.BooleanField(default=False)),
                ('authorize', models.CharField(default='Pending', max_length=20, null=True, blank=True, choices=[('Pending', 'Pending'), ('Aproved', 'Authorize'), ('Declined', 'Decline')])),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='employees.Employee', null=True)),
                ('fuel_card', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.FuelCard', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical fuel allocation',
            },
        ),
        migrations.CreateModel(
            name='HistoricalFuelCard',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('card_number', models.CharField(max_length=120, db_index=True)),
                ('card_type', models.CharField(max_length=20, choices=[('Absa Fleet', 'Absa Fleet'), ('Eden Red', 'Eden Red')])),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical fuel card',
            },
        ),
        migrations.CreateModel(
            name='HistoricalIncident',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('incident_date', models.DateField(null=True, blank=True)),
                ('time_of_incident', models.TimeField(null=True, blank=True)),
                ('incident_type', models.CharField(default=None, max_length=200, null=True, blank=True, choices=[('Road Accident', 'Road Accident'), ('Mechanical Breakdown', 'Mechanical Breakdown'), ('Tire Puncture', 'Tire Puncture'), ('Wind Screen Damages', 'Wind Screen Damages'), ('Head Lamp Damage', 'Head Lamp Damage'), ('Body Dants & Scratches', 'Body Dants & Scratches'), ('Car Theft & Hijacking', 'Car Theft & Hijacking'), ('Vandalism', 'Vandalism')])),
                ('case_number', models.CharField(max_length=120, db_index=True)),
                ('location', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('Description', models.CharField(default=None, max_length=2000, null=True, blank=True)),
                ('date_reported', models.DateField(null=True, blank=True)),
                ('police_station', models.CharField(default=None, max_length=200, null=True, blank=True)),
                ('damage_extent', models.CharField(default=None, max_length=200, null=True, blank=True, choices=[('Minor Damages', 'Vehicle with minor damage'), ('Major Damages', 'Vehicle with major damage'), ('Write Off', 'Vehicle write off')])),
                ('current_mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('no_claim', models.BooleanField(default=False)),
                ('claimed', models.BooleanField(default=False)),
                ('right_rear_fender', models.BooleanField(default=False)),
                ('right_rear_wheel', models.BooleanField(default=False)),
                ('right_rear_door', models.BooleanField(default=False)),
                ('right_rear_lamp', models.BooleanField(default=False)),
                ('right_rear_window', models.BooleanField(default=False)),
                ('right_rear_door_window', models.BooleanField(default=False)),
                ('right_rear_viewmirror', models.BooleanField(default=False)),
                ('right_front_door_window', models.BooleanField(default=False)),
                ('right_front_door', models.BooleanField(default=False)),
                ('right_front_wheel', models.BooleanField(default=False)),
                ('right_front_fender', models.BooleanField(default=False)),
                ('right_head_lamp', models.BooleanField(default=False)),
                ('left_rear_fender', models.BooleanField(default=False)),
                ('left_rear_wheel', models.BooleanField(default=False)),
                ('left_rear_door', models.BooleanField(default=False)),
                ('left_rear_lamp', models.BooleanField(default=False)),
                ('left_rear_window', models.BooleanField(default=False)),
                ('left_rear_door_window', models.BooleanField(default=False)),
                ('left_rear_viewmirror', models.BooleanField(default=False)),
                ('left_front_door_window', models.BooleanField(default=False)),
                ('left_front_door', models.BooleanField(default=False)),
                ('left_front_wheel', models.BooleanField(default=False)),
                ('left_front_fender', models.BooleanField(default=False)),
                ('left_head_lamp', models.BooleanField(default=False)),
                ('rear_bumper', models.BooleanField(default=False)),
                ('boot_door', models.BooleanField(default=False)),
                ('rear_wind_screen', models.BooleanField(default=False)),
                ('car_top', models.BooleanField(default=False)),
                ('wind_screen', models.BooleanField(default=False)),
                ('hood', models.BooleanField(default=False)),
                ('grill', models.BooleanField(default=False)),
                ('front_bumper', models.BooleanField(default=False)),
                ('chasis', models.BooleanField(default=False)),
                ('suspension', models.BooleanField(default=False)),
                ('engine', models.BooleanField(default=False)),
                ('gear_box', models.BooleanField(default=False)),
                ('dashboard', models.BooleanField(default=False)),
                ('dashboard_controls', models.BooleanField(default=False)),
                ('sound_system', models.BooleanField(default=False)),
                ('Steering', models.BooleanField(default=False)),
                ('left_front_seat', models.BooleanField(default=False)),
                ('rear_seat', models.BooleanField(default=False)),
                ('right_front_seat', models.BooleanField(default=False)),
                ('door_panels', models.BooleanField(default=False)),
                ('foot_pedals', models.BooleanField(default=False)),
                ('hand_brake', models.BooleanField(default=False)),
                ('capets', models.BooleanField(default=False)),
                ('ceiling', models.BooleanField(default=False)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='employees.Employee', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical incident',
            },
        ),
        migrations.CreateModel(
            name='HistoricalInsuranceClaim',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('submission_date', models.DateField(null=True, blank=True)),
                ('claim_number', models.CharField(max_length=120, db_index=True)),
                ('payout_date', models.DateField(null=True, blank=True)),
                ('payout_amount', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('sp_payout_date', models.DateField(null=True, blank=True)),
                ('sp_payout_amount', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('excess', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('claim_status', models.CharField(default=None, max_length=200, null=True, blank=True, choices=[('Pending', 'Claim Pending'), ('Awaiting additional information from driver', 'Awaiting additional information from driver'), ('Awaiting Assessors Report', 'Awaiting Assessors Report'), ('Rejected', 'Rejected'), ('Finalized', 'Finalized')])),
                ('accept', models.BooleanField(default=False)),
                ('authorize', models.CharField(default='Pending', max_length=20, null=True, blank=True, choices=[('Pending', 'Pending'), ('Aproved', 'Authorize'), ('Declined', 'Decline')])),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='employees.Employee', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical insurance claim',
            },
        ),
        migrations.CreateModel(
            name='HistoricalMileageLog',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('log_date', models.DateField(null=True, blank=True)),
                ('starting_mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('current_mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('fuel_balance_bf', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('fuel_used', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('fuel_balance', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('start_date', models.DateField(null=True, blank=True)),
                ('end_date', models.DateField(null=True, blank=True)),
                ('status', models.CharField(blank=True, max_length=20, null=True, choices=[('Good Condition', 'Vehicle in good condition'), ('Minor Damages', 'Vehicle with minor damage'), ('Major Damages', 'Vehicle with major damage'), ('Write Off', 'Vehicle write off')])),
                ('doors', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('seats', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('body', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('tires', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('interior', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('boot', models.FloatField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('under_hood', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('engine_check', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('exhaust_check', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('feature_check', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('sound_system', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('steering', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('brakes', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('transmission', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('overall_feel', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='employees.Employee', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical mileage log',
            },
        ),
        migrations.CreateModel(
            name='HistoricalRenewLicenceDisk',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('expiry_date', models.DateField(null=True, blank=True)),
                ('renewal_date', models.DateField(null=True, blank=True)),
                ('amount', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('new_expiry_date', models.DateField(null=True, blank=True)),
                ('accept', models.BooleanField(default=False)),
                ('authorize', models.CharField(default='Pending', max_length=20, null=True, blank=True, choices=[('Pending', 'Pending'), ('Aproved', 'Authorize'), ('Declined', 'Decline')])),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='employees.Employee', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical renew licence disk',
            },
        ),
        migrations.CreateModel(
            name='HistoricalRequisition',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('quote_number', models.CharField(default=None, max_length=120)),
                ('obj_id', models.IntegerField(null=True, blank=True)),
                ('requisition_type', models.CharField(default=None, max_length=120)),
                ('description', models.CharField(default=None, max_length=2000, null=True, blank=True)),
                ('requested', models.DateTimeField(editable=False, blank=True)),
                ('supplier', models.CharField(default=None, max_length=120)),
                ('vat_included', models.BooleanField(default=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='employees.Employee', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('requested_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='employees.Employee', null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical requisition',
            },
        ),
        migrations.CreateModel(
            name='HistoricalRequisitionItem',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('item_code', models.CharField(default=None, max_length=200, null=True, blank=True)),
                ('line_item', models.CharField(default=None, max_length=200, null=True, blank=True)),
                ('qty', models.IntegerField(null=True, blank=True)),
                ('unit_price', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('line_total', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical requisition item',
            },
        ),
        migrations.CreateModel(
            name='HistoricalServiceBooking',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('service_type', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Minor', 'Minor Service'), ('Major', 'Major Service')])),
                ('sevice_description', models.CharField(default=None, max_length=2500, null=True, blank=True)),
                ('booking_date', models.DateField(null=True, blank=True)),
                ('service_date', models.DateField(null=True, blank=True)),
                ('garage', models.CharField(default=None, max_length=250, null=True, blank=True)),
                ('mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('next_service_mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('wheel_alignment', models.BooleanField(default=False)),
                ('wheel_balancing', models.BooleanField(default=False)),
                ('change_cam_belt', models.BooleanField(default=False)),
                ('air_con_regass', models.BooleanField(default=False)),
                ('serviced', models.BooleanField(default=False)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='employees.Employee', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical service booking',
            },
        ),
        migrations.CreateModel(
            name='HistoricalTrafficfine',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('notice_number', models.CharField(max_length=250, db_index=True)),
                ('offence_date', models.DateField(null=True, blank=True)),
                ('due_date', models.DateField(null=True, blank=True)),
                ('description', models.CharField(default=None, max_length=250, null=True, blank=True)),
                ('location', models.CharField(default=None, max_length=250, null=True, blank=True)),
                ('amount', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('court_date', models.DateField(null=True, blank=True)),
                ('serious_offence', models.BooleanField(default=False)),
                ('awaiting_summons', models.BooleanField(default=False)),
                ('court_appearance', models.BooleanField(default=False)),
                ('court_attended', models.BooleanField(default=False)),
                ('paid', models.BooleanField(default=False)),
                ('payment_date', models.DateField(null=True, blank=True)),
                ('accept', models.BooleanField(default=False)),
                ('authorize', models.CharField(default='Pending', max_length=20, null=True, blank=True, choices=[('Pending', 'Pending'), ('Aproved', 'Authorize'), ('Declined', 'Decline')])),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='employees.Employee', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical trafficfine',
            },
        ),
        migrations.CreateModel(
            name='HistoricalVehicle',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('licence_plate', models.CharField(max_length=20, db_index=True)),
                ('ownership_type', models.CharField(blank=True, max_length=20, null=True, choices=[('EL Fleet', 'Emerald Life Fleet'), ('EL Rental', 'Emerald Life Rental'), ('EL Staff', 'Emerald Life Staff')])),
                ('vin_number', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('model_year', models.CharField(default=None, max_length=4, null=True, blank=True)),
                ('signing_mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('licence_disk_expiry', models.DateField(null=True, blank=True)),
                ('color', models.CharField(default='White', max_length=20, choices=[('Beige', 'Beige'), ('Black', 'Black'), ('Red', 'Red'), ('Bronze', 'Bronze'), ('Brass', 'Brass'), ('Brown', 'Brown'), ('Charcoal', 'Charcoal'), ('Cherry', 'Cherry'), ('Champaigne', 'Champaigne'), ('Cream', 'Cream'), ('Creamson', 'Creamson'), ('Coffee', 'Coffee'), ('Green', 'Green'), ('Gold', 'Gold'), ('Khaki', 'Khaki'), ('Light_Blue', 'Light Blue'), ('Lime', 'Lime'), ('Maroon', 'Maroon'), ('Orange', 'Orange'), ('Purple', 'Purple'), ('Silver', 'Silver'), ('Siena', 'Siena'), ('Tan', 'Tan'), ('Turquoise', 'Turquoise'), ('Violet', 'Violet'), ('White', 'White'), ('Yellow', 'Yellow')])),
                ('status', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Good Condition', 'Vehicle in good condition'), ('Minor Damages', 'Vehicle with minor damage'), ('Major Damages', 'Vehicle with major damage'), ('Write Off', 'Vehicle write off')])),
                ('available', models.BooleanField(default=True)),
                ('active', models.BooleanField(default=True)),
                ('rental_start_date', models.DateField(null=True, blank=True)),
                ('rental_end_date', models.DateField(null=True, blank=True)),
                ('purchase_date', models.DateField(null=True, blank=True)),
                ('purchase_amount', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('supplier', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('condition', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Brand_New', 'Brand New'), ('Pre_Owned', 'Pre Owned')])),
                ('invoice_number', models.CharField(default=None, max_length=50, null=True, blank=True)),
                ('warranty_expiry', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('financier', models.CharField(default=None, max_length=50, null=True, blank=True, choices=[('Not_Financed', 'Not Financed'), ('ABSA_Financial_Serveice', 'ABSA Financial Services'), ('Wesbank', 'Wesbank'), ('VW_Financial_Services', 'VW Financial Services'), ('Toyota_Financial_Services', 'Toyota Financial Services'), ('Nedbank_Financial_Services', 'Nedbank Financial Services')])),
                ('has_tracker', models.BooleanField(default=False)),
                ('tracker_provider', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('insured', models.BooleanField(default=False)),
                ('insurer', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('on_service_plan', models.BooleanField(default=False)),
                ('on_maintenance_plan', models.BooleanField(default=False)),
                ('plan_provider', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('period', models.CharField(default=None, max_length=20, null=True, blank=True)),
                ('start_date', models.DateField(null=True, blank=True)),
                ('end_date', models.DateField(null=True, blank=True)),
                ('mileage_covered', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('fuel_balance', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('current_driver', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='employees.Employee', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical vehicle',
            },
        ),
        migrations.CreateModel(
            name='HistoricalVehicleAllocation',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('transaction_type', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Allocated', 'Allocate Vehicle'), ('Returned', 'Return Vehicle'), ('Returned_To_SP', 'Return To Service Provider')])),
                ('allocation_date', models.DateField(null=True, blank=True)),
                ('cycle_limit', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('status', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Good Condition', 'Vehicle in good condition'), ('Minor Damages', 'Vehicle with minor damage'), ('Major Damages', 'Vehicle with major damage'), ('Write Off', 'Vehicle write off')])),
                ('authorizer', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Andre', 'Andre Van de Westhuizen'), ('Leroux', 'Leroux Delport'), ('Nico', 'Nico Smit'), ('Steyn', 'Steyn Swarts'), ('Lewis', 'Lewis Kufazvinei'), ('Janine', 'Janine Swart'), ('Anita', 'Anita Mostert')])),
                ('accept', models.BooleanField(default=False)),
                ('authorize', models.CharField(default='Pending', max_length=20, null=True, blank=True, choices=[('Pending', 'Pending'), ('Aproved', 'Authorize'), ('Declined', 'Decline')])),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='employees.Employee', null=True)),
                ('fuel_card', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.FuelCard', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical vehicle allocation',
            },
        ),
        migrations.CreateModel(
            name='HistoricalVehicleExtras',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('description', models.CharField(max_length=50, null=True, blank=True)),
                ('air_conditioner', models.BooleanField(default=False)),
                ('turbo', models.BooleanField(default=False)),
                ('sunroof', models.BooleanField(default=False)),
                ('alloy_wheels', models.BooleanField(default=False)),
                ('canopy', models.BooleanField(default=False)),
                ('leather_seats', models.BooleanField(default=False)),
                ('keyless_entry', models.BooleanField(default=False)),
                ('anti_bracking_system', models.BooleanField(default=False)),
                ('airbag', models.BooleanField(default=False)),
                ('dual_airbag', models.BooleanField(default=False)),
                ('long_base', models.BooleanField(default=False)),
                ('power_windows', models.BooleanField(default=False)),
                ('power_steering', models.BooleanField(default=False)),
                ('power_mirros', models.BooleanField(default=False)),
                ('anti_theft', models.BooleanField(default=False)),
                ('electronic_fuel_injection', models.BooleanField(default=False)),
                ('raised_suspension', models.BooleanField(default=False)),
                ('lowerd_suspension', models.BooleanField(default=False)),
                ('height_adjustable_seat', models.BooleanField(default=False)),
                ('height_adjustable_steering', models.BooleanField(default=False)),
                ('alarm_electronic_immobiliser', models.BooleanField(default=False)),
                ('central_locking_system', models.BooleanField(default=False)),
                ('radio_cd_4speakers', models.BooleanField(default=False)),
                ('usb_bluetooth', models.BooleanField(default=False)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical vehicle extras',
            },
        ),
        migrations.CreateModel(
            name='HistoricalVehicleMaintenance',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('maint_date', models.DateField(null=True, blank=True)),
                ('maint_type', models.CharField(default=None, max_length=200, null=True, blank=True, choices=[('Body Works', 'Body Works'), ('Electrical', 'Eloctronic'), ('Engine ', 'Engine'), ('Gearbox', 'Gearbox'), ('Service', 'Service'), ('Suspension', 'Suspension'), ('Tires', 'Tires')])),
                ('current_mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('description', models.CharField(default=None, max_length=2000, null=True, blank=True)),
                ('projected_cost', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('actual_cost', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('difference', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('status', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Good Condition', 'Vehicle in good condition'), ('Minor Damages', 'Vehicle with minor damage'), ('Major Damages', 'Vehicle with major damage'), ('Write Off', 'Vehicle write off')])),
                ('invoice_number', models.CharField(default=None, max_length=200, null=True, blank=True)),
                ('service_provider', models.CharField(default=None, max_length=200, null=True, blank=True)),
                ('accept', models.BooleanField(default=False)),
                ('authorize', models.CharField(default='Pending', max_length=20, null=True, blank=True, choices=[('Pending', 'Pending'), ('Aproved', 'Authorize'), ('Declined', 'Decline')])),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('created_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='employees.Employee', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical vehicle maintenance',
            },
        ),
        migrations.CreateModel(
            name='HistoricalVehicleMakeAndModel',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('make_n_model', models.CharField(max_length=120, null=True, blank=True)),
                ('vehicle_class', models.CharField(blank=True, max_length=20, null=True, choices=[('Sedan', 'Sedan'), ('Hatch', 'Hatch Back'), ('Single', 'Single Cab'), ('Double', 'Double Cab'), ('Club', 'Club Cab'), ('Sports', 'Sports Utility Vehicle'), ('Station', 'Station Wagon')])),
                ('fuel_type', models.CharField(blank=True, max_length=20, null=True, choices=[('Petrol_95_Unleaded', 'Petrol 95 Unleaded'), ('Petrol_LRP', 'Petrol LRP'), ('Diesel_50PP', 'Diesel 50PP'), ('Diesel_500PPM', 'Diesel 500PPM')])),
                ('engine_capacity', models.CharField(blank=True, max_length=20, null=True, choices=[('1.2_Liter', '1.2 Liter'), ('1.4_Liter', '1.4 Liter'), ('1.5_Liter', '1.5 Liter'), ('1.6_Liter', '1.6 Liter'), ('1.8_Liter', '1.8 Liter'), ('1.8_Liter', '1.8 Liter'), ('2.2_Liter', '2.2 Liter'), ('2.4_Liter', '2.4 Liter'), ('2.5_Liter', '2.5 Liter'), ('2.7_Liter', '2.7 Liter'), ('2.8_Liter', '2.8 Liter'), ('3.0_Liter', '3.0 Liter'), ('3.2_Liter', '3.2 Liter'), ('3.4_Liter', '3.4 Liter'), ('3.6_Liter', '3.6 Liter'), ('3.8_Liter', '3.8 Liter'), ('4.0_Liter', '3.6 Liter')])),
                ('transmission_type', models.CharField(blank=True, max_length=20, null=True, choices=[('Manual', 'Manaual'), ('Automatic', 'Automatic')])),
                ('seats', models.CharField(default='5_seater', max_length=20, choices=[('5_seater', '5 Seater'), ('7_seater', '7 Seater')])),
                ('steering', models.CharField(default='right_hand_drive', max_length=20, null=True, blank=True, choices=[('right_hand_drive', 'Right Hand Drive'), ('left_hand_drive', 'Left Hand Drive')])),
                ('doors', models.CharField(blank=True, max_length=20, null=True, choices=[('2_doors', '2 Doors'), ('3_doors', '3 Doors'), ('4_doors', '4 Doors'), ('5_doors', '5 Doors')])),
                ('tank_capacity', models.CharField(blank=True, max_length=20, null=True, choices=[('45_Liters', '45 Liters'), ('50_Liters', '50 Liters'), ('55_Liters', '55 Liters'), ('60_Liters', '60 Liters'), ('65_Liters', '65 Liters'), ('70_Liters', '70 Liters'), ('75_Liters', '75 Liters'), ('80_Liters', '80 Liters'), ('85_Liters', '85 Liters'), ('90_Liters', '90 Liters'), ('95_Liters', '95 Liters'), ('100_Liters', '100 Liters')])),
                ('wheel_size', models.CharField(blank=True, max_length=20, null=True, choices=[('13_Inch', '13 Inch'), ('14_Inch', '14 Inch'), ('15_inch', '15 Inch'), ('16_Inch', '16 Inch'), ('17_Inch', '17 Inch'), ('18_Inch', '18 Inch'), ('19_Inch', '19 Inch'), ('20 _nch', '20 Inch')])),
                ('service_interval', models.IntegerField(null=True, blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical vehicle make and model',
            },
        ),
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('incident_date', models.DateField(null=True, blank=True)),
                ('time_of_incident', models.TimeField(null=True, blank=True)),
                ('incident_type', models.CharField(default=None, max_length=200, null=True, blank=True, choices=[('Road Accident', 'Road Accident'), ('Mechanical Breakdown', 'Mechanical Breakdown'), ('Tire Puncture', 'Tire Puncture'), ('Wind Screen Damages', 'Wind Screen Damages'), ('Head Lamp Damage', 'Head Lamp Damage'), ('Body Dants & Scratches', 'Body Dants & Scratches'), ('Car Theft & Hijacking', 'Car Theft & Hijacking'), ('Vandalism', 'Vandalism')])),
                ('case_number', models.CharField(unique=True, max_length=120)),
                ('location', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('Description', models.CharField(default=None, max_length=2000, null=True, blank=True)),
                ('date_reported', models.DateField(null=True, blank=True)),
                ('police_station', models.CharField(default=None, max_length=200, null=True, blank=True)),
                ('damage_extent', models.CharField(default=None, max_length=200, null=True, blank=True, choices=[('Minor Damages', 'Vehicle with minor damage'), ('Major Damages', 'Vehicle with major damage'), ('Write Off', 'Vehicle write off')])),
                ('current_mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('no_claim', models.BooleanField(default=False)),
                ('claimed', models.BooleanField(default=False)),
                ('right_rear_fender', models.BooleanField(default=False)),
                ('right_rear_wheel', models.BooleanField(default=False)),
                ('right_rear_door', models.BooleanField(default=False)),
                ('right_rear_lamp', models.BooleanField(default=False)),
                ('right_rear_window', models.BooleanField(default=False)),
                ('right_rear_door_window', models.BooleanField(default=False)),
                ('right_rear_viewmirror', models.BooleanField(default=False)),
                ('right_front_door_window', models.BooleanField(default=False)),
                ('right_front_door', models.BooleanField(default=False)),
                ('right_front_wheel', models.BooleanField(default=False)),
                ('right_front_fender', models.BooleanField(default=False)),
                ('right_head_lamp', models.BooleanField(default=False)),
                ('left_rear_fender', models.BooleanField(default=False)),
                ('left_rear_wheel', models.BooleanField(default=False)),
                ('left_rear_door', models.BooleanField(default=False)),
                ('left_rear_lamp', models.BooleanField(default=False)),
                ('left_rear_window', models.BooleanField(default=False)),
                ('left_rear_door_window', models.BooleanField(default=False)),
                ('left_rear_viewmirror', models.BooleanField(default=False)),
                ('left_front_door_window', models.BooleanField(default=False)),
                ('left_front_door', models.BooleanField(default=False)),
                ('left_front_wheel', models.BooleanField(default=False)),
                ('left_front_fender', models.BooleanField(default=False)),
                ('left_head_lamp', models.BooleanField(default=False)),
                ('rear_bumper', models.BooleanField(default=False)),
                ('boot_door', models.BooleanField(default=False)),
                ('rear_wind_screen', models.BooleanField(default=False)),
                ('car_top', models.BooleanField(default=False)),
                ('wind_screen', models.BooleanField(default=False)),
                ('hood', models.BooleanField(default=False)),
                ('grill', models.BooleanField(default=False)),
                ('front_bumper', models.BooleanField(default=False)),
                ('chasis', models.BooleanField(default=False)),
                ('suspension', models.BooleanField(default=False)),
                ('engine', models.BooleanField(default=False)),
                ('gear_box', models.BooleanField(default=False)),
                ('dashboard', models.BooleanField(default=False)),
                ('dashboard_controls', models.BooleanField(default=False)),
                ('sound_system', models.BooleanField(default=False)),
                ('Steering', models.BooleanField(default=False)),
                ('left_front_seat', models.BooleanField(default=False)),
                ('rear_seat', models.BooleanField(default=False)),
                ('right_front_seat', models.BooleanField(default=False)),
                ('door_panels', models.BooleanField(default=False)),
                ('foot_pedals', models.BooleanField(default=False)),
                ('hand_brake', models.BooleanField(default=False)),
                ('capets', models.BooleanField(default=False)),
                ('ceiling', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(related_name='user_incidences', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='driver_incidences', to='employees.Employee')),
                ('modified_by', models.ForeignKey(related_name='user_modifed_incidences', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InsuranceClaim',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('submission_date', models.DateField(null=True, blank=True)),
                ('claim_number', models.CharField(unique=True, max_length=120)),
                ('payout_date', models.DateField(null=True, blank=True)),
                ('payout_amount', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('sp_payout_date', models.DateField(null=True, blank=True)),
                ('sp_payout_amount', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('excess', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('claim_status', models.CharField(default=None, max_length=200, null=True, blank=True, choices=[('Pending', 'Claim Pending'), ('Awaiting additional information from driver', 'Awaiting additional information from driver'), ('Awaiting Assessors Report', 'Awaiting Assessors Report'), ('Rejected', 'Rejected'), ('Finalized', 'Finalized')])),
                ('accept', models.BooleanField(default=False)),
                ('authorize', models.CharField(default='Pending', max_length=20, null=True, blank=True, choices=[('Pending', 'Pending'), ('Aproved', 'Authorize'), ('Declined', 'Decline')])),
                ('created_by', models.ForeignKey(related_name='user_insuranceClaims', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='driver_insuranceClaims', to='employees.Employee')),
                ('incidence_number', models.ForeignKey(related_name='incidenceNumber_vehicleInsuranceClaims', blank=True, to='fleet.Incident', null=True)),
                ('modified_by', models.ForeignKey(related_name='user_modifed_insuranceClaims', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MileageLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('log_date', models.DateField(null=True, blank=True)),
                ('starting_mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('current_mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('fuel_balance_bf', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('fuel_used', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('fuel_balance', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('start_date', models.DateField(null=True, blank=True)),
                ('end_date', models.DateField(null=True, blank=True)),
                ('status', models.CharField(blank=True, max_length=20, null=True, choices=[('Good Condition', 'Vehicle in good condition'), ('Minor Damages', 'Vehicle with minor damage'), ('Major Damages', 'Vehicle with major damage'), ('Write Off', 'Vehicle write off')])),
                ('doors', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('seats', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('body', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('tires', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('interior', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('boot', models.FloatField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('under_hood', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('engine_check', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('exhaust_check', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('feature_check', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('sound_system', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('steering', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('brakes', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('transmission', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('overall_feel', models.IntegerField(blank=True, null=True, choices=[(1, '5: Excellent'), (2, '4: Very Good'), (3, '3: Good'), (4, '2: Bad'), (5, '1: very Bad')])),
                ('created_by', models.ForeignKey(related_name='user_mileage_logs', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='driver_mileageLogs', to='employees.Employee')),
                ('modified_by', models.ForeignKey(related_name='user_modified_mileage_logs', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RenewLicenceDisk',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('expiry_date', models.DateField(null=True, blank=True)),
                ('renewal_date', models.DateField(null=True, blank=True)),
                ('amount', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('new_expiry_date', models.DateField(null=True, blank=True)),
                ('accept', models.BooleanField(default=False)),
                ('authorize', models.CharField(default='Pending', max_length=20, null=True, blank=True, choices=[('Pending', 'Pending'), ('Aproved', 'Authorize'), ('Declined', 'Decline')])),
                ('created_by', models.ForeignKey(related_name='user_liceenceRenewals', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='driver_renewLicenceDisk', to='employees.Employee')),
                ('modified_by', models.ForeignKey(related_name='user_modified_licenceRenewals', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Requisition',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('quote_number', models.CharField(default=None, max_length=120)),
                ('obj_id', models.IntegerField(null=True, blank=True)),
                ('requisition_type', models.CharField(default=None, max_length=120)),
                ('description', models.CharField(default=None, max_length=2000, null=True, blank=True)),
                ('requested', models.DateTimeField(auto_now_add=True)),
                ('supplier', models.CharField(default=None, max_length=120)),
                ('vat_included', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(related_name='user_requisitions', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='driver_requisitions', to='employees.Employee')),
                ('modified_by', models.ForeignKey(related_name='user_modifed_requisitions', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('requested_by', models.ForeignKey(related_name='employee_requisitions', to='employees.Employee')),
            ],
        ),
        migrations.CreateModel(
            name='RequisitionItem',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('item_code', models.CharField(default=None, max_length=200, null=True, blank=True)),
                ('line_item', models.CharField(default=None, max_length=200, null=True, blank=True)),
                ('qty', models.IntegerField(null=True, blank=True)),
                ('unit_price', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('line_total', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('created_by', models.ForeignKey(related_name='user_requisitionitems', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='user_modifed_requisitionitems', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('requisition_no', models.ForeignKey(related_name='requisition_requistionItems', to='fleet.Requisition')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceBooking',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('service_type', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Minor', 'Minor Service'), ('Major', 'Major Service')])),
                ('sevice_description', models.CharField(default=None, max_length=2500, null=True, blank=True)),
                ('booking_date', models.DateField(null=True, blank=True)),
                ('service_date', models.DateField(null=True, blank=True)),
                ('garage', models.CharField(default=None, max_length=250, null=True, blank=True)),
                ('mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('next_service_mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('wheel_alignment', models.BooleanField(default=False)),
                ('wheel_balancing', models.BooleanField(default=False)),
                ('change_cam_belt', models.BooleanField(default=False)),
                ('air_con_regass', models.BooleanField(default=False)),
                ('serviced', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(related_name='user_serviceBookings', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='driver_serviceBookings', to='employees.Employee')),
                ('modified_by', models.ForeignKey(related_name='user_modified_ServiceBookings', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Trafficfine',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('notice_number', models.CharField(unique=True, max_length=250)),
                ('offence_date', models.DateField(null=True, blank=True)),
                ('due_date', models.DateField(null=True, blank=True)),
                ('description', models.CharField(default=None, max_length=250, null=True, blank=True)),
                ('location', models.CharField(default=None, max_length=250, null=True, blank=True)),
                ('amount', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('court_date', models.DateField(null=True, blank=True)),
                ('serious_offence', models.BooleanField(default=False)),
                ('awaiting_summons', models.BooleanField(default=False)),
                ('court_appearance', models.BooleanField(default=False)),
                ('court_attended', models.BooleanField(default=False)),
                ('paid', models.BooleanField(default=False)),
                ('payment_date', models.DateField(null=True, blank=True)),
                ('accept', models.BooleanField(default=False)),
                ('authorize', models.CharField(default='Pending', max_length=20, null=True, blank=True, choices=[('Pending', 'Pending'), ('Aproved', 'Authorize'), ('Declined', 'Decline')])),
                ('created_by', models.ForeignKey(related_name='user_trafficFines', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='driver_trafficFines', to='employees.Employee')),
                ('modified_by', models.ForeignKey(related_name='user_modified_trafficFines', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('log_date', models.DateTimeField(null=True, blank=True)),
                ('duration', models.DateTimeField(null=True, blank=True)),
                ('avarage_speed', models.IntegerField(null=True, blank=True)),
                ('max_speed', models.IntegerField(null=True, blank=True)),
                ('distance', models.IntegerField(null=True, blank=True)),
                ('created_by', models.ForeignKey(related_name='user_trip', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='driver_trip', blank=True, to='employees.Employee', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TripLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('log_date', models.DateTimeField(null=True, blank=True)),
                ('location', models.CharField(default=None, max_length=2500, null=True, blank=True)),
                ('road_speed', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('speed', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('odometer', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('status', models.CharField(default=None, max_length=50, null=True, blank=True)),
                ('created_by', models.ForeignKey(related_name='user_triplog', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('trip_number', models.ForeignKey(blank=True, to='fleet.Trip', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('licence_plate', models.CharField(unique=True, max_length=20)),
                ('ownership_type', models.CharField(blank=True, max_length=20, null=True, choices=[('EL Fleet', 'Emerald Life Fleet'), ('EL Rental', 'Emerald Life Rental'), ('EL Staff', 'Emerald Life Staff')])),
                ('vin_number', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('model_year', models.CharField(default=None, max_length=4, null=True, blank=True)),
                ('signing_mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('licence_disk_expiry', models.DateField(null=True, blank=True)),
                ('color', models.CharField(default='White', max_length=20, choices=[('Beige', 'Beige'), ('Black', 'Black'), ('Red', 'Red'), ('Bronze', 'Bronze'), ('Brass', 'Brass'), ('Brown', 'Brown'), ('Charcoal', 'Charcoal'), ('Cherry', 'Cherry'), ('Champaigne', 'Champaigne'), ('Cream', 'Cream'), ('Creamson', 'Creamson'), ('Coffee', 'Coffee'), ('Green', 'Green'), ('Gold', 'Gold'), ('Khaki', 'Khaki'), ('Light_Blue', 'Light Blue'), ('Lime', 'Lime'), ('Maroon', 'Maroon'), ('Orange', 'Orange'), ('Purple', 'Purple'), ('Silver', 'Silver'), ('Siena', 'Siena'), ('Tan', 'Tan'), ('Turquoise', 'Turquoise'), ('Violet', 'Violet'), ('White', 'White'), ('Yellow', 'Yellow')])),
                ('status', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Good Condition', 'Vehicle in good condition'), ('Minor Damages', 'Vehicle with minor damage'), ('Major Damages', 'Vehicle with major damage'), ('Write Off', 'Vehicle write off')])),
                ('available', models.BooleanField(default=True)),
                ('active', models.BooleanField(default=True)),
                ('rental_start_date', models.DateField(null=True, blank=True)),
                ('rental_end_date', models.DateField(null=True, blank=True)),
                ('purchase_date', models.DateField(null=True, blank=True)),
                ('purchase_amount', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('supplier', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('condition', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Brand_New', 'Brand New'), ('Pre_Owned', 'Pre Owned')])),
                ('invoice_number', models.CharField(default=None, max_length=50, null=True, blank=True)),
                ('warranty_expiry', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('financier', models.CharField(default=None, max_length=50, null=True, blank=True, choices=[('Not_Financed', 'Not Financed'), ('ABSA_Financial_Serveice', 'ABSA Financial Services'), ('Wesbank', 'Wesbank'), ('VW_Financial_Services', 'VW Financial Services'), ('Toyota_Financial_Services', 'Toyota Financial Services'), ('Nedbank_Financial_Services', 'Nedbank Financial Services')])),
                ('has_tracker', models.BooleanField(default=False)),
                ('tracker_provider', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('insured', models.BooleanField(default=False)),
                ('insurer', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('on_service_plan', models.BooleanField(default=False)),
                ('on_maintenance_plan', models.BooleanField(default=False)),
                ('plan_provider', models.CharField(default=None, max_length=120, null=True, blank=True)),
                ('period', models.CharField(default=None, max_length=20, null=True, blank=True)),
                ('start_date', models.DateField(null=True, blank=True)),
                ('end_date', models.DateField(null=True, blank=True)),
                ('mileage_covered', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('fuel_balance', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('created_by', models.ForeignKey(related_name='user_vehicle', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('current_driver', models.ForeignKey(blank=True, to='employees.Employee', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VehicleAllocation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('transaction_type', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Allocated', 'Allocate Vehicle'), ('Returned', 'Return Vehicle'), ('Returned_To_SP', 'Return To Service Provider')])),
                ('allocation_date', models.DateField(null=True, blank=True)),
                ('cycle_limit', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('status', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Good Condition', 'Vehicle in good condition'), ('Minor Damages', 'Vehicle with minor damage'), ('Major Damages', 'Vehicle with major damage'), ('Write Off', 'Vehicle write off')])),
                ('authorizer', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Andre', 'Andre Van de Westhuizen'), ('Leroux', 'Leroux Delport'), ('Nico', 'Nico Smit'), ('Steyn', 'Steyn Swarts'), ('Lewis', 'Lewis Kufazvinei'), ('Janine', 'Janine Swart'), ('Anita', 'Anita Mostert')])),
                ('accept', models.BooleanField(default=False)),
                ('authorize', models.CharField(default='Pending', max_length=20, null=True, blank=True, choices=[('Pending', 'Pending'), ('Aproved', 'Authorize'), ('Declined', 'Decline')])),
                ('created_by', models.ForeignKey(related_name='user_VehicleAllocations', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='driver_VehicleAllocations', to='employees.Employee')),
                ('fuel_card', models.ForeignKey(blank=True, to='fleet.FuelCard', null=True)),
                ('modified_by', models.ForeignKey(related_name='user_modified_VehicleAllocations', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('vehicle', models.ForeignKey(related_name='vehicle_VehicleAllocations', to='fleet.Vehicle')),
            ],
        ),
        migrations.CreateModel(
            name='VehicleExtras',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50, null=True, blank=True)),
                ('air_conditioner', models.BooleanField(default=False)),
                ('turbo', models.BooleanField(default=False)),
                ('sunroof', models.BooleanField(default=False)),
                ('alloy_wheels', models.BooleanField(default=False)),
                ('canopy', models.BooleanField(default=False)),
                ('leather_seats', models.BooleanField(default=False)),
                ('keyless_entry', models.BooleanField(default=False)),
                ('anti_bracking_system', models.BooleanField(default=False)),
                ('airbag', models.BooleanField(default=False)),
                ('dual_airbag', models.BooleanField(default=False)),
                ('long_base', models.BooleanField(default=False)),
                ('power_windows', models.BooleanField(default=False)),
                ('power_steering', models.BooleanField(default=False)),
                ('power_mirros', models.BooleanField(default=False)),
                ('anti_theft', models.BooleanField(default=False)),
                ('electronic_fuel_injection', models.BooleanField(default=False)),
                ('raised_suspension', models.BooleanField(default=False)),
                ('lowerd_suspension', models.BooleanField(default=False)),
                ('height_adjustable_seat', models.BooleanField(default=False)),
                ('height_adjustable_steering', models.BooleanField(default=False)),
                ('alarm_electronic_immobiliser', models.BooleanField(default=False)),
                ('central_locking_system', models.BooleanField(default=False)),
                ('radio_cd_4speakers', models.BooleanField(default=False)),
                ('usb_bluetooth', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='VehicleMaintenance',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('maint_date', models.DateField(null=True, blank=True)),
                ('maint_type', models.CharField(default=None, max_length=200, null=True, blank=True, choices=[('Body Works', 'Body Works'), ('Electrical', 'Eloctronic'), ('Engine ', 'Engine'), ('Gearbox', 'Gearbox'), ('Service', 'Service'), ('Suspension', 'Suspension'), ('Tires', 'Tires')])),
                ('current_mileage', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('description', models.CharField(default=None, max_length=2000, null=True, blank=True)),
                ('projected_cost', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('actual_cost', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('difference', models.FloatField(default=0, max_length=20, null=True, blank=True)),
                ('status', models.CharField(default=None, max_length=20, null=True, blank=True, choices=[('Good Condition', 'Vehicle in good condition'), ('Minor Damages', 'Vehicle with minor damage'), ('Major Damages', 'Vehicle with major damage'), ('Write Off', 'Vehicle write off')])),
                ('invoice_number', models.CharField(default=None, max_length=200, null=True, blank=True)),
                ('service_provider', models.CharField(default=None, max_length=200, null=True, blank=True)),
                ('accept', models.BooleanField(default=False)),
                ('authorize', models.CharField(default='Pending', max_length=20, null=True, blank=True, choices=[('Pending', 'Pending'), ('Aproved', 'Authorize'), ('Declined', 'Decline')])),
                ('created_by', models.ForeignKey(related_name='user_vehicleMaintenance', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('driver', models.ForeignKey(related_name='driver_vehicleMaintenance', to='employees.Employee')),
                ('modified_by', models.ForeignKey(related_name='user_modified_vehicleMaintenance', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('service_booking_number', models.ForeignKey(related_name='servicebooking_vehicleMaintenance', blank=True, to='fleet.ServiceBooking', null=True)),
                ('vehicle', models.ForeignKey(related_name='vehicle_vehicleMaintenance', to='fleet.Vehicle')),
            ],
        ),
        migrations.CreateModel(
            name='VehicleMakeAndModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('make_n_model', models.CharField(max_length=120, null=True, blank=True)),
                ('vehicle_class', models.CharField(blank=True, max_length=20, null=True, choices=[('Sedan', 'Sedan'), ('Hatch', 'Hatch Back'), ('Single', 'Single Cab'), ('Double', 'Double Cab'), ('Club', 'Club Cab'), ('Sports', 'Sports Utility Vehicle'), ('Station', 'Station Wagon')])),
                ('fuel_type', models.CharField(blank=True, max_length=20, null=True, choices=[('Petrol_95_Unleaded', 'Petrol 95 Unleaded'), ('Petrol_LRP', 'Petrol LRP'), ('Diesel_50PP', 'Diesel 50PP'), ('Diesel_500PPM', 'Diesel 500PPM')])),
                ('engine_capacity', models.CharField(blank=True, max_length=20, null=True, choices=[('1.2_Liter', '1.2 Liter'), ('1.4_Liter', '1.4 Liter'), ('1.5_Liter', '1.5 Liter'), ('1.6_Liter', '1.6 Liter'), ('1.8_Liter', '1.8 Liter'), ('1.8_Liter', '1.8 Liter'), ('2.2_Liter', '2.2 Liter'), ('2.4_Liter', '2.4 Liter'), ('2.5_Liter', '2.5 Liter'), ('2.7_Liter', '2.7 Liter'), ('2.8_Liter', '2.8 Liter'), ('3.0_Liter', '3.0 Liter'), ('3.2_Liter', '3.2 Liter'), ('3.4_Liter', '3.4 Liter'), ('3.6_Liter', '3.6 Liter'), ('3.8_Liter', '3.8 Liter'), ('4.0_Liter', '3.6 Liter')])),
                ('transmission_type', models.CharField(blank=True, max_length=20, null=True, choices=[('Manual', 'Manaual'), ('Automatic', 'Automatic')])),
                ('seats', models.CharField(default='5_seater', max_length=20, choices=[('5_seater', '5 Seater'), ('7_seater', '7 Seater')])),
                ('steering', models.CharField(default='right_hand_drive', max_length=20, null=True, blank=True, choices=[('right_hand_drive', 'Right Hand Drive'), ('left_hand_drive', 'Left Hand Drive')])),
                ('doors', models.CharField(blank=True, max_length=20, null=True, choices=[('2_doors', '2 Doors'), ('3_doors', '3 Doors'), ('4_doors', '4 Doors'), ('5_doors', '5 Doors')])),
                ('tank_capacity', models.CharField(blank=True, max_length=20, null=True, choices=[('45_Liters', '45 Liters'), ('50_Liters', '50 Liters'), ('55_Liters', '55 Liters'), ('60_Liters', '60 Liters'), ('65_Liters', '65 Liters'), ('70_Liters', '70 Liters'), ('75_Liters', '75 Liters'), ('80_Liters', '80 Liters'), ('85_Liters', '85 Liters'), ('90_Liters', '90 Liters'), ('95_Liters', '95 Liters'), ('100_Liters', '100 Liters')])),
                ('wheel_size', models.CharField(blank=True, max_length=20, null=True, choices=[('13_Inch', '13 Inch'), ('14_Inch', '14 Inch'), ('15_inch', '15 Inch'), ('16_Inch', '16 Inch'), ('17_Inch', '17 Inch'), ('18_Inch', '18 Inch'), ('19_Inch', '19 Inch'), ('20 _nch', '20 Inch')])),
                ('service_interval', models.IntegerField(null=True, blank=True)),
            ],
        ),
        migrations.AddField(
            model_name='vehicleextras',
            name='make_n_model',
            field=models.ForeignKey(blank=True, to='fleet.VehicleMakeAndModel', null=True),
        ),
        migrations.AddField(
            model_name='vehicle',
            name='make_n_model',
            field=models.ForeignKey(blank=True, to='fleet.VehicleMakeAndModel', null=True),
        ),
        migrations.AddField(
            model_name='vehicle',
            name='modified_by',
            field=models.ForeignKey(related_name='user_modified_vehicle', blank=True, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='trip',
            name='vehicle',
            field=models.ForeignKey(related_name='vehicle_trip', blank=True, to='fleet.Vehicle', null=True),
        ),
        migrations.AddField(
            model_name='trafficfine',
            name='vehicle',
            field=models.ForeignKey(related_name='vehicle_trafficFines', to='fleet.Vehicle'),
        ),
        migrations.AddField(
            model_name='servicebooking',
            name='vehicle',
            field=models.ForeignKey(related_name='vehicle_serviceBookings', to='fleet.Vehicle'),
        ),
        migrations.AddField(
            model_name='requisition',
            name='vehicle',
            field=models.ForeignKey(related_name='vehicle_requisitions', to='fleet.Vehicle'),
        ),
        migrations.AddField(
            model_name='renewlicencedisk',
            name='vehicle',
            field=models.ForeignKey(related_name='vehicle_renewLicenceDisk', to='fleet.Vehicle'),
        ),
        migrations.AddField(
            model_name='mileagelog',
            name='vehicle',
            field=models.ForeignKey(related_name='vehicle_mileage_logs', to='fleet.Vehicle'),
        ),
        migrations.AddField(
            model_name='insuranceclaim',
            name='vehicle',
            field=models.ForeignKey(related_name='vehicle_insuranceClaims', to='fleet.Vehicle'),
        ),
        migrations.AddField(
            model_name='incident',
            name='vehicle',
            field=models.ForeignKey(related_name='vehicle_incidences', to='fleet.Vehicle'),
        ),
        migrations.AddField(
            model_name='historicalvehiclemaintenance',
            name='service_booking_number',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.ServiceBooking', null=True),
        ),
        migrations.AddField(
            model_name='historicalvehiclemaintenance',
            name='vehicle',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.Vehicle', null=True),
        ),
        migrations.AddField(
            model_name='historicalvehicleextras',
            name='make_n_model',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.VehicleMakeAndModel', null=True),
        ),
        migrations.AddField(
            model_name='historicalvehicleallocation',
            name='vehicle',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.Vehicle', null=True),
        ),
        migrations.AddField(
            model_name='historicalvehicle',
            name='make_n_model',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.VehicleMakeAndModel', null=True),
        ),
        migrations.AddField(
            model_name='historicalvehicle',
            name='modified_by',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicaltrafficfine',
            name='vehicle',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.Vehicle', null=True),
        ),
        migrations.AddField(
            model_name='historicalservicebooking',
            name='vehicle',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.Vehicle', null=True),
        ),
        migrations.AddField(
            model_name='historicalrequisitionitem',
            name='requisition_no',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.Requisition', null=True),
        ),
        migrations.AddField(
            model_name='historicalrequisition',
            name='vehicle',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.Vehicle', null=True),
        ),
        migrations.AddField(
            model_name='historicalrenewlicencedisk',
            name='vehicle',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.Vehicle', null=True),
        ),
        migrations.AddField(
            model_name='historicalmileagelog',
            name='vehicle',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.Vehicle', null=True),
        ),
        migrations.AddField(
            model_name='historicalinsuranceclaim',
            name='incidence_number',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.Incident', null=True),
        ),
        migrations.AddField(
            model_name='historicalinsuranceclaim',
            name='modified_by',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalinsuranceclaim',
            name='vehicle',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.Vehicle', null=True),
        ),
        migrations.AddField(
            model_name='historicalincident',
            name='vehicle',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.Vehicle', null=True),
        ),
        migrations.AddField(
            model_name='historicalfuelallocation',
            name='vehicle',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='fleet.Vehicle', null=True),
        ),
        migrations.AddField(
            model_name='fuelallocation',
            name='fuel_card',
            field=models.ForeignKey(blank=True, to='fleet.FuelCard', null=True),
        ),
        migrations.AddField(
            model_name='fuelallocation',
            name='modified_by',
            field=models.ForeignKey(related_name='user_modified_fuelAllocations', blank=True, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='fuelallocation',
            name='vehicle',
            field=models.ForeignKey(related_name='vehicle_fuelAllocations', to='fleet.Vehicle'),
        ),
        migrations.AddField(
            model_name='fileupload',
            name='vehicle',
            field=models.ForeignKey(related_name='vehicle_vehicleFileUploads', blank=True, to='fleet.Vehicle', null=True),
        ),
        migrations.AddField(
            model_name='comment',
            name='vehicle',
            field=models.ForeignKey(related_name='vehicle_comments', to='fleet.Vehicle'),
        ),
    ]
